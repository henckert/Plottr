openapi: 3.0.3
info:
  title: Plottr API
  version: '0.1.0'
  description: >-
    OpenAPI 3 spec for Plottr â€” venue & pitch mapping API (MVP backend).
    Includes CRUD operations for venues, pitches, and sessions with
    optimistic concurrency control via version tokens.
servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://api.plottr.example.com
    description: Production server (placeholder)

paths:
  /health:
    get:
      summary: Health check
      description: Returns 200 if backend is alive
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean

  /templates:
    get:
      summary: List templates
      description: Return available pitch templates (public, no auth required)
      tags:
        - Templates
      responses:
        '200':
          description: A list of templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Template'

  /venues:
    get:
      summary: List venues
      description: Get all venues (requires auth in production)
      tags:
        - Venues
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of venues
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Venue'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a venue
      description: Create a new venue (requires auth)
      tags:
        - Venues
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueCreate'
      responses:
        '201':
          description: Venue created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Venue'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /venues/{id}:
    get:
      summary: Get a venue by ID
      description: Get details of a single venue
      tags:
        - Venues
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Venue details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Venue'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a venue
      description: Update venue with optimistic concurrency control via If-Match header
      tags:
        - Venues
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: header
          name: If-Match
          required: true
          description: Current version_token of the resource (use "null-token" if null)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueUpdate'
      responses:
        '200':
          description: Venue updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Venue'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Version conflict - stale version_token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Resource version mismatch (stale version_token)
                      code:
                        type: string
                        example: CONFLICT
  /pitches:
    get:
      summary: List pitches
      description: Get all pitches (optionally filtered by venue)
      tags:
        - Pitches
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of pitches
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pitch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a pitch
      description: Create a new pitch with geometry
      tags:
        - Pitches
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PitchCreate'
      responses:
        '201':
          description: Pitch created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pitch'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /pitches/{id}:
    get:
      summary: Get a pitch by ID
      description: Get details of a single pitch
      tags:
        - Pitches
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Pitch details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pitch'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a pitch
      description: Update pitch with optimistic concurrency control via If-Match header
      tags:
        - Pitches
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: header
          name: If-Match
          required: true
          description: Current version_token of the resource (use "null-token" if null)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PitchUpdate'
      responses:
        '200':
          description: Pitch updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pitch'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Version conflict - stale version_token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Resource version mismatch (stale version_token)
                      code:
                        type: string
                        example: CONFLICT
  /sessions:
    get:
      summary: List sessions
      description: Get all sessions
      tags:
        - Sessions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a session
      description: Create a new session for a pitch
      tags:
        - Sessions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreate'
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /sessions/{id}:
    get:
      summary: Get a session by ID
      description: Get details of a single session
      tags:
        - Sessions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a session
      description: Update session with optimistic concurrency control via If-Match header
      tags:
        - Sessions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: header
          name: If-Match
          required: true
          description: Current version_token of the resource (use "null-token" if null)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionUpdate'
      responses:
        '200':
          description: Session updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Version conflict - stale version_token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Resource version mismatch (stale version_token)
                      code:
                        type: string
                        example: CONFLICT

  /sites:
    get:
      summary: List sites with cursor pagination
      description: Get paginated list of sites for a specific club
      tags:
        - Sites
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: club_id
          required: true
          schema:
            type: integer
          description: Filter sites by club ID
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: Base64-encoded cursor for pagination
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of records to return (max 100)
      responses:
        '200':
          description: Paginated list of sites
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Site'
                  next_cursor:
                    type: string
                    nullable: true
                    description: Cursor for next page (null if no more pages)
                  has_more:
                    type: boolean
                    description: True if more pages available
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a site
      description: Create a new site with GeoJSON Point location
      tags:
        - Sites
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteCreate'
      responses:
        '201':
          description: Site created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Site'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /sites/{id}:
    get:
      summary: Get a single site
      description: Retrieve site by ID
      tags:
        - Sites
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: club_id
          required: true
          schema:
            type: integer
          description: Club ID for ownership validation
      responses:
        '200':
          description: Site details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Site'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a site
      description: Update site with optimistic concurrency control via If-Match header
      tags:
        - Sites
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: header
          name: If-Match
          required: true
          description: Current version_token (UUID) of the resource
          schema:
            type: string
        - in: query
          name: club_id
          required: true
          schema:
            type: integer
          description: Club ID for ownership validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteUpdate'
      responses:
        '200':
          description: Site updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Site'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/VersionConflictError'
    delete:
      summary: Delete a site (soft delete)
      description: Soft delete site with optimistic concurrency control
      tags:
        - Sites
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: header
          name: If-Match
          required: true
          description: Current version_token (UUID) of the resource
          schema:
            type: string
        - in: query
          name: club_id
          required: true
          schema:
            type: integer
          description: Club ID for ownership validation
      responses:
        '204':
          description: Site soft deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/VersionConflictError'

  /layouts:
    get:
      summary: List layouts for a site
      description: Get paginated list of layouts for a specific site
      tags:
        - Layouts
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: site_id
          required: true
          schema:
            type: integer
          description: Filter layouts by site ID
        - in: query
          name: club_id
          required: true
          schema:
            type: integer
          description: Club ID for ownership validation
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: Base64-encoded cursor for pagination
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of records to return (max 100)
      responses:
        '200':
          description: Paginated list of layouts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Layout'
                  next_cursor:
                    type: string
                    nullable: true
                  has_more:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      summary: Create a layout
      description: Create a new layout for a site
      tags:
        - Layouts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LayoutCreate'
      responses:
        '201':
          description: Layout created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Layout'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /layouts/{id}:
    get:
      summary: Get a single layout
      description: Retrieve layout by ID
      tags:
        - Layouts
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: club_id
          required: true
          schema:
            type: integer
          description: Club ID for ownership validation
      responses:
        '200':
          description: Layout details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Layout'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a layout
      description: Update layout with optimistic concurrency control
      tags:
        - Layouts
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: header
          name: If-Match
          required: true
          description: Current version_token (UUID) of the resource
          schema:
            type: string
        - in: query
          name: club_id
          required: true
          schema:
            type: integer
          description: Club ID for ownership validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LayoutUpdate'
      responses:
        '200':
          description: Layout updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Layout'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/VersionConflictError'
    delete:
      summary: Delete a layout (hard delete)
      description: Hard delete layout with CASCADE to zones/assets/templates
      tags:
        - Layouts
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: header
          name: If-Match
          required: true
          description: Current version_token (UUID) of the resource
          schema:
            type: string
        - in: query
          name: club_id
          required: true
          schema:
            type: integer
          description: Club ID for ownership validation
      responses:
        '204':
          description: Layout deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/VersionConflictError'

  /zones:
    get:
      summary: List zones for a layout
      description: Get paginated list of zones with optional filtering by layout_id and zone_type
      tags:
        - Zones
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: layout_id
          required: false
          schema:
            type: integer
          description: Filter zones by layout ID
        - in: query
          name: zone_type
          required: false
          schema:
            type: string
            enum:
              - pitch
              - goal_area
              - penalty_area
              - training_zone
              - competition
              - parking
              - seating
              - entrance
              - exit
              - restroom
              - concession
              - vendor
              - medical
              - equipment
              - other
          description: Filter zones by type
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: Base64-encoded cursor for pagination
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of records to return (max 100)
      responses:
        '200':
          description: Paginated list of zones
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Zone'
                  next_cursor:
                    type: string
                    nullable: true
                  has_more:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a zone
      description: Create a new zone within a layout
      tags:
        - Zones
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneCreate'
      responses:
        '201':
          description: Zone created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Zone'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Layout not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Layout not found
                      code:
                        type: string
                        example: LAYOUT_NOT_FOUND

  /zones/{id}:
    get:
      summary: Get a single zone
      description: Retrieve zone by ID
      tags:
        - Zones
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Zone details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Zone'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a zone
      description: Update zone with optimistic concurrency control
      tags:
        - Zones
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: header
          name: If-Match
          required: true
          description: Current version_token (UUID) of the resource
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneUpdate'
      responses:
        '200':
          description: Zone updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Zone'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/VersionConflictError'
    delete:
      summary: Delete a zone
      description: Delete zone with optimistic concurrency control
      tags:
        - Zones
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: header
          name: If-Match
          required: true
          description: Current version_token (UUID) of the resource
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Zone deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/VersionConflictError'

  /assets:
    get:
      summary: List assets with cursor pagination
      description: Get paginated list of assets filtered by layout_id, zone_id, or asset_type
      tags:
        - Assets
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: layout_id
          required: false
          schema:
            type: integer
          description: Filter assets by layout ID
        - in: query
          name: zone_id
          required: false
          schema:
            type: integer
          description: Filter assets by zone ID
        - in: query
          name: asset_type
          required: false
          schema:
            type: string
            enum: [goal, bench, light, cone, flag, marker, tree, fence, net, scoreboard, water_fountain, trash_bin, camera, other]
          description: Filter assets by type
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: Base64-encoded cursor for pagination
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of records to return (max 100)
      responses:
        '200':
          description: Paginated list of assets
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
                  next_cursor:
                    type: string
                    nullable: true
                  has_more:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create an asset
      description: Create a new asset (POINT or LINESTRING geometry only)
      tags:
        - Assets
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetCreate'
      responses:
        '201':
          description: Asset created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Asset'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /assets/{id}:
    get:
      summary: Get a single asset
      description: Retrieve asset by ID
      tags:
        - Assets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Asset details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Asset'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update an asset
      description: Update asset with optimistic concurrency control
      tags:
        - Assets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: header
          name: If-Match
          required: true
          description: Current version_token (UUID) of the resource
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetUpdate'
      responses:
        '200':
          description: Asset updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Asset'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/VersionConflictError'
    delete:
      summary: Delete an asset
      description: Delete asset with optimistic concurrency control
      tags:
        - Assets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: header
          name: If-Match
          required: true
          description: Current version_token (UUID) of the resource
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Asset deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/VersionConflictError'

  /share-links:
    get:
      summary: List share links with cursor pagination
      description: Get paginated list of share links for a specific layout
      tags:
        - ShareLinks
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: layout_id
          required: false
          schema:
            type: integer
          description: Filter share links by layout ID
        - in: query
          name: cursor
          required: false
          schema:
            type: string
          description: Base64-encoded cursor for pagination
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of records to return (max 100)
      responses:
        '200':
          description: Paginated list of share links
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShareLink'
                  next_cursor:
                    type: string
                    nullable: true
                  has_more:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a share link
      description: Create a new share link for a layout
      tags:
        - ShareLinks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareLinkCreate'
      responses:
        '201':
          description: Share link created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ShareLink'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /share-links/{id}:
    get:
      summary: Get a single share link
      description: Retrieve share link by ID
      tags:
        - ShareLinks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Share link details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ShareLink'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Revoke a share link
      description: Delete share link to revoke public access
      tags:
        - ShareLinks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Share link revoked successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /share/{slug}:
    get:
      summary: Public share view (no auth)
      description: Access a shared layout via public slug (increments view_count)
      tags:
        - ShareLinks
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: Unique share link slug
      responses:
        '200':
          description: Public layout data with zones and assets
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      layout:
                        $ref: '#/components/schemas/Layout'
                      zones:
                        type: array
                        items:
                          $ref: '#/components/schemas/Zone'
                      assets:
                        type: array
                        items:
                          $ref: '#/components/schemas/Asset'
                      share_link:
                        type: object
                        properties:
                          slug:
                            type: string
                          view_count:
                            type: integer
                          expires_at:
                            type: string
                            format: date-time
                            nullable: true
                          last_accessed_at:
                            type: string
                            format: date-time
                            nullable: true
        '404':
          $ref: '#/components/responses/NotFoundError'
        '410':
          description: Share link expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Share link has expired
                      code:
                        type: string
                        example: SHARE_LINK_EXPIRED

  /templates/from-layout:
    post:
      summary: Create a template from a layout
      description: Save current layout as a reusable template
      tags:
        - Templates
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateCreateFromLayout'
      responses:
        '201':
          description: Template created from layout
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Template'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /templates/{id}:
    get:
      summary: Get a single template
      description: Retrieve template by ID
      tags:
        - Templates
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Template details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Template'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete a template
      description: Delete custom template (only creator can delete)
      tags:
        - Templates
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Template deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /templates/{id}/apply:
    post:
      summary: Apply a template to a layout
      description: Apply template zones and assets to an existing layout
      tags:
        - Templates
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Template ID to apply
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                layout_id:
                  type: integer
                  description: Target layout ID
                clear_existing:
                  type: boolean
                  default: true
                  description: Clear existing zones/assets before applying template
              required:
                - layout_id
      responses:
        '200':
          description: Template applied successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Template applied successfully
                      zones_created:
                        type: array
                        items:
                          type: string
                        example: ['Pitch', 'Goal Area', 'Penalty Box']
                      assets_created:
                        type: array
                        items:
                          type: string
                        example: ['Goal Post 1', 'Corner Flag 1', 'Bench']
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Bearer token for API authentication (dev-token in dev mode)

  responses:
    BadRequestError:
      description: Bad request - validation failed or missing required fields
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: string
                    example: VALIDATION_ERROR

    UnauthorizedError:
      description: Missing or invalid Authorization header
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: string
                    example: MISSING_AUTH

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: string
                    example: NOT_FOUND

    ForbiddenError:
      description: Forbidden - user does not have permission to access this resource
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: Access denied - ownership validation failed
                  code:
                    type: string
                    example: FORBIDDEN

    VersionConflictError:
      description: Version conflict - stale version_token (optimistic locking)
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: Resource version mismatch - stale version_token
                  code:
                    type: string
                    example: VERSION_CONFLICT

  schemas:
    Template:
      type: object
      properties:
        id:
          type: integer
          example: 1
        template_id:
          type: string
          example: rugby_standard
        name:
          type: string
          example: Standard Rugby
        meta:
          type: object
          example: { sport: rugby, standard: true }
        created_at:
          type: string
          format: date-time
          example: '2025-10-16T10:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-16T10:00:00.000Z'

    Site:
      type: object
      properties:
        id:
          type: integer
          example: 1
        club_id:
          type: integer
          example: 1
        name:
          type: string
          example: Riverside Sports Complex
          maxLength: 200
        location:
          type: object
          description: GeoJSON Point (WGS84, SRID 4326)
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
              minItems: 2
              maxItems: 2
          example: { type: Point, coordinates: [-6.2603, 53.3498] }
        boundary:
          type: object
          nullable: true
          description: GeoJSON Polygon (WGS84, SRID 4326)
          properties:
            type:
              type: string
              enum: [Polygon]
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: number
          example: { type: Polygon, coordinates: [[[-6.2610, 53.3490], [-6.2596, 53.3490], [-6.2596, 53.3506], [-6.2610, 53.3506], [-6.2610, 53.3490]]] }
        address:
          type: string
          nullable: true
          example: '123 River Road, Dublin 4, Ireland'
          maxLength: 500
        version_token:
          type: string
          format: uuid
          example: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890'
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Soft delete timestamp
        created_at:
          type: string
          format: date-time
          example: '2025-10-20T10:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-20T10:00:00.000Z'
      required:
        - id
        - club_id
        - name
        - location
        - version_token
        - created_at
        - updated_at

    SiteCreate:
      type: object
      properties:
        club_id:
          type: integer
          example: 1
        name:
          type: string
          example: New Sports Complex
          maxLength: 200
        location:
          type: object
          description: GeoJSON Point (WGS84, SRID 4326)
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
              minItems: 2
              maxItems: 2
          example: { type: Point, coordinates: [-6.2603, 53.3498] }
        boundary:
          type: object
          nullable: true
          description: GeoJSON Polygon (WGS84, SRID 4326)
        address:
          type: string
          nullable: true
          maxLength: 500
      required:
        - club_id
        - name
        - location

    SiteUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
        location:
          type: object
          description: GeoJSON Point (WGS84, SRID 4326)
        boundary:
          type: object
          nullable: true
          description: GeoJSON Polygon (WGS84, SRID 4326)
        address:
          type: string
          nullable: true
          maxLength: 500
      description: All fields optional (partial update). Requires at least one field.

    Layout:
      type: object
      properties:
        id:
          type: integer
          example: 1
        site_id:
          type: integer
          example: 1
        name:
          type: string
          example: Winter Training Layout
          maxLength: 200
        description:
          type: string
          nullable: true
          example: Main training configuration for winter season
          maxLength: 2000
        is_published:
          type: boolean
          example: false
          description: Whether layout is publicly visible
        version_token:
          type: string
          format: uuid
          example: 'b2c3d4e5-f6a7-8901-bcde-f12345678901'
        created_at:
          type: string
          format: date-time
          example: '2025-10-20T10:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-20T10:00:00.000Z'
      required:
        - id
        - site_id
        - name
        - is_published
        - version_token
        - created_at
        - updated_at

    LayoutCreate:
      type: object
      properties:
        site_id:
          type: integer
          example: 1
        name:
          type: string
          example: New Layout
          maxLength: 200
        description:
          type: string
          nullable: true
          maxLength: 2000
        is_published:
          type: boolean
          example: false
      required:
        - site_id
        - name

    LayoutUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
          maxLength: 2000
        is_published:
          type: boolean
      description: All fields optional (partial update). Requires at least one field.

    Zone:
      type: object
      properties:
        id:
          type: integer
          example: 1
        layout_id:
          type: integer
          example: 1
        name:
          type: string
          example: Main Pitch
          maxLength: 100
        zone_type:
          type: string
          enum:
            - pitch
            - goal_area
            - penalty_area
            - training_zone
            - competition
            - parking
            - seating
            - entrance
            - exit
            - restroom
            - concession
            - vendor
            - medical
            - equipment
            - other
          example: pitch
        surface:
          type: string
          enum:
            - grass
            - turf
            - clay
            - concrete
            - asphalt
            - gravel
            - other
          nullable: true
          example: grass
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          nullable: true
          example: '#22c55e'
          description: Hex color code for zone visualization
        boundary:
          type: object
          description: GeoJSON Polygon (WGS84) defining zone boundaries
          example:
            type: Polygon
            coordinates:
              - - [-122.4194, 37.7749]
                - [-122.4184, 37.7749]
                - [-122.4184, 37.7739]
                - [-122.4194, 37.7739]
                - [-122.4194, 37.7749]
        area_sqm:
          type: number
          nullable: true
          example: 7200.5
          description: Calculated area in square meters
        perimeter_m:
          type: number
          nullable: true
          example: 360.2
          description: Calculated perimeter in meters
        version_token:
          type: string
          format: uuid
          example: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890'
        created_at:
          type: string
          format: date-time
          example: '2025-10-20T10:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-20T10:00:00.000Z'
      required:
        - id
        - layout_id
        - name
        - zone_type
        - boundary
        - version_token
        - created_at
        - updated_at

    ZoneCreate:
      type: object
      properties:
        layout_id:
          type: integer
          example: 1
        name:
          type: string
          example: New Pitch
          maxLength: 100
        zone_type:
          type: string
          enum:
            - pitch
            - goal_area
            - penalty_area
            - training_zone
            - competition
            - parking
            - seating
            - entrance
            - exit
            - restroom
            - concession
            - vendor
            - medical
            - equipment
            - other
          example: pitch
        surface:
          type: string
          enum:
            - grass
            - turf
            - clay
            - concrete
            - asphalt
            - gravel
            - other
          nullable: true
          example: grass
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          nullable: true
          example: '#22c55e'
          description: Hex color code (e.g., #22c55e)
        boundary:
          type: object
          description: 'GeoJSON Polygon (WGS84). Must be valid: closed ring, 4+ points, WGS84 bounds'
          example:
            type: Polygon
            coordinates:
              - - [-122.4194, 37.7749]
                - [-122.4184, 37.7749]
                - [-122.4184, 37.7739]
                - [-122.4194, 37.7739]
                - [-122.4194, 37.7749]
      required:
        - layout_id
        - name
        - zone_type
        - boundary

    ZoneUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        zone_type:
          type: string
          enum:
            - pitch
            - goal_area
            - penalty_area
            - training_zone
            - competition
            - parking
            - seating
            - entrance
            - exit
            - restroom
            - concession
            - vendor
            - medical
            - equipment
            - other
        surface:
          type: string
          enum:
            - grass
            - turf
            - clay
            - concrete
            - asphalt
            - gravel
            - other
          nullable: true
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          nullable: true
          description: Hex color code
        boundary:
          type: object
          description: GeoJSON Polygon (WGS84)
      description: All fields optional (partial update). Requires at least one field.

    Venue:
      type: object
      properties:
        id:
          type: integer
          example: 1
        club_id:
          type: integer
          example: 1
        name:
          type: string
          example: Riverside Park
        address:
          type: string
          example: '123 River Road, Dublin 4, Ireland'
        center_point:
          type: object
          description: GeoJSON Point (WGS84)
          example: { type: Point, coordinates: [-6.2603, 53.3498] }
        bbox:
          type: object
          description: GeoJSON Polygon bounding box (WGS84)
          example: { type: Polygon, coordinates: [[[-6.2610, 53.3490], [-6.2596, 53.3490], [-6.2596, 53.3506], [-6.2610, 53.3506], [-6.2610, 53.3490]]] }
        tz:
          type: string
          example: Europe/Dublin
        published:
          type: boolean
          example: true
        version_token:
          type: string
          nullable: true
          example: v001_river_001
        created_at:
          type: string
          format: date-time
          example: '2025-10-16T10:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-16T10:30:00.000Z'
      required:
        - id
        - club_id
        - name
        - created_at
        - updated_at

    VenueCreate:
      type: object
      properties:
        club_id:
          type: integer
          example: 1
        name:
          type: string
          example: New Venue
        address:
          type: string
          example: '456 Oak Ave'
        center_point:
          type: object
          description: Optional GeoJSON Point
        bbox:
          type: object
          description: Optional GeoJSON Polygon bounding box
        tz:
          type: string
          example: Europe/London
        published:
          type: boolean
          example: false
      required:
        - club_id
        - name

    VenueUpdate:
      type: object
      properties:
        name:
          type: string
          example: Updated Venue Name
        address:
          type: string
        center_point:
          type: object
        bbox:
          type: object
        tz:
          type: string
        published:
          type: boolean
      description: All fields optional (PATCH semantics)
    Pitch:
      type: object
      properties:
        id:
          type: integer
          example: 1
        venue_id:
          type: integer
          example: 1
        name:
          type: string
          example: Pitch A
        code:
          type: string
          example: PA
        sport:
          type: string
          example: rugby
        level:
          type: string
          example: senior
        geometry:
          type: object
          description: GeoJSON Polygon (WGS84, SRID 4326)
          example: { type: Polygon, coordinates: [[[-6.2603, 53.3498], [-6.2602, 53.3498], [-6.2602, 53.3499], [-6.2603, 53.3499], [-6.2603, 53.3498]]] }
        rotation_deg:
          type: number
          example: 0
        template_id:
          type: string
          nullable: true
          example: rugby_standard
        status:
          type: string
          enum: [draft, published]
          example: draft
        version_token:
          type: string
          nullable: true
          example: v001_pitch_a_001
        created_at:
          type: string
          format: date-time
          example: '2025-10-16T10:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-16T10:00:00.000Z'
      required:
        - id
        - venue_id
        - name
        - created_at
        - updated_at

    PitchCreate:
      type: object
      properties:
        venue_id:
          type: integer
          example: 1
        name:
          type: string
          example: New Pitch
        code:
          type: string
          example: NP
        sport:
          type: string
          example: football
        level:
          type: string
          example: senior
        geometry:
          type: object
          description: GeoJSON Polygon (WGS84)
        rotation_deg:
          type: number
        template_id:
          type: string
          nullable: true
        status:
          type: string
          enum: [draft, published]
          example: draft
      required:
        - venue_id
        - name

    PitchUpdate:
      type: object
      properties:
        name:
          type: string
        code:
          type: string
        sport:
          type: string
        level:
          type: string
        geometry:
          type: object
        rotation_deg:
          type: number
        template_id:
          type: string
          nullable: true
        status:
          type: string
          enum: [draft, published]
      description: All fields optional (PATCH semantics)
    Session:
      type: object
      properties:
        id:
          type: integer
          example: 1
        team_id:
          type: integer
          nullable: true
          example: 1
        venue_id:
          type: integer
          example: 1
        pitch_id:
          type: integer
          nullable: true
          example: 1
        segment_id:
          type: integer
          nullable: true
        start_ts:
          type: string
          format: date-time
          nullable: true
          example: '2025-10-17T10:00:00.000Z'
        end_ts:
          type: string
          format: date-time
          nullable: true
          example: '2025-10-17T11:00:00.000Z'
        notes:
          type: string
          nullable: true
          example: Team practice
        share_token:
          type: string
          nullable: true
          example: share_abc123def456
        version_token:
          type: string
          nullable: true
          example: v001_session_001
        created_at:
          type: string
          format: date-time
          example: '2025-10-16T10:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-16T10:00:00.000Z'
      required:
        - id
        - venue_id
        - created_at
        - updated_at

    SessionCreate:
      type: object
      properties:
        team_id:
          type: integer
          nullable: true
        venue_id:
          type: integer
          example: 1
        pitch_id:
          type: integer
          nullable: true
        segment_id:
          type: integer
          nullable: true
        start_ts:
          type: string
          format: date-time
          nullable: true
        end_ts:
          type: string
          format: date-time
          nullable: true
        notes:
          type: string
          nullable: true
        share_token:
          type: string
          nullable: true
      required:
        - venue_id

    SessionUpdate:
      type: object
      properties:
        team_id:
          type: integer
          nullable: true
        pitch_id:
          type: integer
          nullable: true
        segment_id:
          type: integer
          nullable: true
        start_ts:
          type: string
          format: date-time
          nullable: true
        end_ts:
          type: string
          format: date-time
          nullable: true
        notes:
          type: string
          nullable: true
        share_token:
          type: string
          nullable: true
      description: All fields optional (PATCH semantics)

    Asset:
      type: object
      properties:
        id:
          type: integer
          example: 1
        layout_id:
          type: integer
          example: 1
        zone_id:
          type: integer
          nullable: true
          example: 5
          description: Optional association with a zone
        name:
          type: string
          example: Goal Post 1
          maxLength: 100
        asset_type:
          type: string
          enum: [goal, bench, light, cone, flag, marker, tree, fence, net, scoreboard, water_fountain, trash_bin, camera, other]
          example: goal
        icon:
          type: string
          enum: [fa-futbol, fa-basketball, fa-volleyball, fa-baseball, fa-flag, fa-bullseye, fa-chair, fa-lightbulb, fa-tree, fa-cone-striped, fa-water, fa-dumpster, fa-square-parking, fa-restroom, fa-kit-medical, fa-camera, fa-wifi, fa-phone, fa-door-open, fa-fence]
          nullable: true
          example: fa-futbol
          description: FontAwesome icon class
        geometry:
          type: object
          description: GeoJSON Point or LineString geometry (WGS84)
          nullable: true
          example:
            type: Point
            coordinates: [-122.4194, 37.7749]
        rotation_deg:
          type: number
          nullable: true
          minimum: 0
          maximum: 360
          example: 45
          description: Rotation angle in degrees (0-360)
        properties:
          type: object
          nullable: true
          additionalProperties: true
          example:
            height: 2.44
            width: 7.32
            material: aluminum
          description: Arbitrary JSON metadata
        version_token:
          type: string
          format: uuid
          example: 'b2c3d4e5-f6a7-8901-bcde-f2345678901a'
        created_at:
          type: string
          format: date-time
          example: '2025-10-20T12:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-20T12:00:00.000Z'
      required:
        - id
        - layout_id
        - name
        - asset_type
        - version_token
        - created_at
        - updated_at

    AssetCreate:
      type: object
      properties:
        layout_id:
          type: integer
          example: 1
        zone_id:
          type: integer
          nullable: true
          example: 5
        name:
          type: string
          example: New Goal Post
          maxLength: 100
        asset_type:
          type: string
          enum: [goal, bench, light, cone, flag, marker, tree, fence, net, scoreboard, water_fountain, trash_bin, camera, other]
          example: goal
        icon:
          type: string
          enum: [fa-futbol, fa-basketball, fa-volleyball, fa-baseball, fa-flag, fa-bullseye, fa-chair, fa-lightbulb, fa-tree, fa-cone-striped, fa-water, fa-dumpster, fa-square-parking, fa-restroom, fa-kit-medical, fa-camera, fa-wifi, fa-phone, fa-door-open, fa-fence]
          nullable: true
          example: fa-futbol
        geometry:
          type: object
          description: GeoJSON Point or LineString (Polygon not allowed)
          nullable: true
          example:
            type: Point
            coordinates: [-122.4194, 37.7749]
        rotation_deg:
          type: number
          nullable: true
          minimum: 0
          maximum: 360
          example: 45
        properties:
          type: object
          nullable: true
          additionalProperties: true
      required:
        - layout_id
        - name
        - asset_type

    AssetUpdate:
      type: object
      properties:
        zone_id:
          type: integer
          nullable: true
        name:
          type: string
          maxLength: 100
        asset_type:
          type: string
          enum: [goal, bench, light, cone, flag, marker, tree, fence, net, scoreboard, water_fountain, trash_bin, camera, other]
        icon:
          type: string
          enum: [fa-futbol, fa-basketball, fa-volleyball, fa-baseball, fa-flag, fa-bullseye, fa-chair, fa-lightbulb, fa-tree, fa-cone-striped, fa-water, fa-dumpster, fa-square-parking, fa-restroom, fa-kit-medical, fa-camera, fa-wifi, fa-phone, fa-door-open, fa-fence]
          nullable: true
        geometry:
          type: object
          description: GeoJSON Point or LineString
          nullable: true
        rotation_deg:
          type: number
          nullable: true
          minimum: 0
          maximum: 360
        properties:
          type: object
          nullable: true
          additionalProperties: true
      description: All fields optional (PATCH semantics)

    ShareLink:
      type: object
      properties:
        id:
          type: integer
          example: 1
        layout_id:
          type: integer
          example: 1
        slug:
          type: string
          example: abc123xyz789
          description: Unique public URL slug
        expires_at:
          type: string
          format: date-time
          nullable: true
          example: '2025-11-15T00:00:00.000Z'
          description: Optional expiration date
        view_count:
          type: integer
          example: 42
          description: Number of times this link has been accessed
        last_accessed_at:
          type: string
          format: date-time
          nullable: true
          example: '2025-10-27T14:30:00.000Z'
        created_at:
          type: string
          format: date-time
          example: '2025-10-20T10:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2025-10-27T14:30:00.000Z'
      required:
        - id
        - layout_id
        - slug
        - view_count
        - created_at
        - updated_at

    ShareLinkCreate:
      type: object
      properties:
        layout_id:
          type: integer
          example: 1
        expires_at:
          type: string
          format: date-time
          nullable: true
          example: '2025-11-15T00:00:00.000Z'
          description: Optional expiration date (ISO 8601 format)
      required:
        - layout_id

    TemplateCreateFromLayout:
      type: object
      properties:
        layout_id:
          type: integer
          example: 1
          description: Source layout ID to create template from
        name:
          type: string
          example: My Custom Soccer Field
          maxLength: 100
        sport_type:
          type: string
          nullable: true
          example: soccer
          description: Sport category for filtering
        description:
          type: string
          nullable: true
          example: Full-size soccer field with goals and benches
          maxLength: 1000
        thumbnail_url:
          type: string
          nullable: true
          format: uri
          example: https://example.com/thumbnails/soccer-field.png
        is_public:
          type: boolean
          default: false
          description: Make template publicly available
      required:
        - layout_id
        - name
