/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    /**
     * Health check
     * @description Returns 200 if backend is alive
     */
    get: {
      responses: {
        /** @description Service is healthy */
        200: {
          content: {
            "application/json": {
              ok?: boolean;
            };
          };
        };
      };
    };
  };
  "/templates": {
    /**
     * List templates
     * @description Return available pitch templates (public, no auth required)
     */
    get: {
      responses: {
        /** @description A list of templates */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Template"][];
            };
          };
        };
      };
    };
  };
  "/venues": {
    /**
     * List venues
     * @description Get all venues (requires auth in production)
     */
    get: {
      responses: {
        /** @description A list of venues */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Venue"][];
            };
          };
        };
        401: components["responses"]["UnauthorizedError"];
      };
    };
    /**
     * Create a venue
     * @description Create a new venue (requires auth)
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["VenueCreate"];
        };
      };
      responses: {
        /** @description Venue created */
        201: {
          content: {
            "application/json": {
              data?: components["schemas"]["Venue"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
      };
    };
  };
  "/venues/{id}": {
    /**
     * Get a venue by ID
     * @description Get details of a single venue
     */
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Venue details */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Venue"];
            };
          };
        };
        401: components["responses"]["UnauthorizedError"];
        404: components["responses"]["NotFoundError"];
      };
    };
    /**
     * Update a venue
     * @description Update venue with optimistic concurrency control via If-Match header
     */
    put: {
      parameters: {
        header: {
          /** @description Current version_token of the resource (use "null-token" if null) */
          "If-Match": string;
        };
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["VenueUpdate"];
        };
      };
      responses: {
        /** @description Venue updated */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Venue"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        404: components["responses"]["NotFoundError"];
        /** @description Version conflict - stale version_token */
        409: {
          content: {
            "application/json": {
              error?: {
                /** @example Resource version mismatch (stale version_token) */
                message?: string;
                /** @example CONFLICT */
                code?: string;
              };
            };
          };
        };
      };
    };
  };
  "/pitches": {
    /**
     * List pitches
     * @description Get all pitches (optionally filtered by venue)
     */
    get: {
      responses: {
        /** @description A list of pitches */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Pitch"][];
            };
          };
        };
        401: components["responses"]["UnauthorizedError"];
      };
    };
    /**
     * Create a pitch
     * @description Create a new pitch with geometry
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PitchCreate"];
        };
      };
      responses: {
        /** @description Pitch created */
        201: {
          content: {
            "application/json": {
              data?: components["schemas"]["Pitch"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
      };
    };
  };
  "/pitches/{id}": {
    /**
     * Get a pitch by ID
     * @description Get details of a single pitch
     */
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Pitch details */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Pitch"];
            };
          };
        };
        401: components["responses"]["UnauthorizedError"];
        404: components["responses"]["NotFoundError"];
      };
    };
    /**
     * Update a pitch
     * @description Update pitch with optimistic concurrency control via If-Match header
     */
    put: {
      parameters: {
        header: {
          /** @description Current version_token of the resource (use "null-token" if null) */
          "If-Match": string;
        };
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["PitchUpdate"];
        };
      };
      responses: {
        /** @description Pitch updated */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Pitch"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        404: components["responses"]["NotFoundError"];
        /** @description Version conflict - stale version_token */
        409: {
          content: {
            "application/json": {
              error?: {
                /** @example Resource version mismatch (stale version_token) */
                message?: string;
                /** @example CONFLICT */
                code?: string;
              };
            };
          };
        };
      };
    };
  };
  "/sessions": {
    /**
     * List sessions
     * @description Get all sessions
     */
    get: {
      responses: {
        /** @description A list of sessions */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Session"][];
            };
          };
        };
        401: components["responses"]["UnauthorizedError"];
      };
    };
    /**
     * Create a session
     * @description Create a new session for a pitch
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SessionCreate"];
        };
      };
      responses: {
        /** @description Session created */
        201: {
          content: {
            "application/json": {
              data?: components["schemas"]["Session"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
      };
    };
  };
  "/sessions/{id}": {
    /**
     * Get a session by ID
     * @description Get details of a single session
     */
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Session details */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Session"];
            };
          };
        };
        401: components["responses"]["UnauthorizedError"];
        404: components["responses"]["NotFoundError"];
      };
    };
    /**
     * Update a session
     * @description Update session with optimistic concurrency control via If-Match header
     */
    put: {
      parameters: {
        header: {
          /** @description Current version_token of the resource (use "null-token" if null) */
          "If-Match": string;
        };
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["SessionUpdate"];
        };
      };
      responses: {
        /** @description Session updated */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Session"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        404: components["responses"]["NotFoundError"];
        /** @description Version conflict - stale version_token */
        409: {
          content: {
            "application/json": {
              error?: {
                /** @example Resource version mismatch (stale version_token) */
                message?: string;
                /** @example CONFLICT */
                code?: string;
              };
            };
          };
        };
      };
    };
  };
  "/sites": {
    /**
     * List sites with cursor pagination
     * @description Get paginated list of sites for a specific club
     */
    get: {
      parameters: {
        query: {
          /** @description Filter sites by club ID */
          club_id: number;
          /** @description Base64-encoded cursor for pagination */
          cursor?: string;
          /** @description Number of records to return (max 100) */
          limit?: number;
        };
      };
      responses: {
        /** @description Paginated list of sites */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Site"][];
              /** @description Cursor for next page (null if no more pages) */
              next_cursor?: string | null;
              /** @description True if more pages available */
              has_more?: boolean;
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
      };
    };
    /**
     * Create a site
     * @description Create a new site with GeoJSON Point location
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SiteCreate"];
        };
      };
      responses: {
        /** @description Site created */
        201: {
          content: {
            "application/json": {
              data?: components["schemas"]["Site"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
      };
    };
  };
  "/sites/{id}": {
    /**
     * Get a single site
     * @description Retrieve site by ID
     */
    get: {
      parameters: {
        query: {
          /** @description Club ID for ownership validation */
          club_id: number;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Site details */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Site"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
      };
    };
    /**
     * Update a site
     * @description Update site with optimistic concurrency control via If-Match header
     */
    put: {
      parameters: {
        query: {
          /** @description Club ID for ownership validation */
          club_id: number;
        };
        header: {
          /** @description Current version_token (UUID) of the resource */
          "If-Match": string;
        };
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["SiteUpdate"];
        };
      };
      responses: {
        /** @description Site updated */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Site"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        409: components["responses"]["VersionConflictError"];
      };
    };
    /**
     * Delete a site (soft delete)
     * @description Soft delete site with optimistic concurrency control
     */
    delete: {
      parameters: {
        query: {
          /** @description Club ID for ownership validation */
          club_id: number;
        };
        header: {
          /** @description Current version_token (UUID) of the resource */
          "If-Match": string;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Site soft deleted successfully */
        204: {
          content: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        409: components["responses"]["VersionConflictError"];
      };
    };
  };
  "/layouts": {
    /**
     * List layouts for a site
     * @description Get paginated list of layouts for a specific site
     */
    get: {
      parameters: {
        query: {
          /** @description Filter layouts by site ID */
          site_id: number;
          /** @description Club ID for ownership validation */
          club_id: number;
          /** @description Base64-encoded cursor for pagination */
          cursor?: string;
          /** @description Number of records to return (max 100) */
          limit?: number;
        };
      };
      responses: {
        /** @description Paginated list of layouts */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Layout"][];
              next_cursor?: string | null;
              has_more?: boolean;
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        403: components["responses"]["ForbiddenError"];
      };
    };
    /**
     * Create a layout
     * @description Create a new layout for a site
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LayoutCreate"];
        };
      };
      responses: {
        /** @description Layout created */
        201: {
          content: {
            "application/json": {
              data?: components["schemas"]["Layout"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        403: components["responses"]["ForbiddenError"];
      };
    };
  };
  "/layouts/{id}": {
    /**
     * Get a single layout
     * @description Retrieve layout by ID
     */
    get: {
      parameters: {
        query: {
          /** @description Club ID for ownership validation */
          club_id: number;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Layout details */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Layout"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
      };
    };
    /**
     * Update a layout
     * @description Update layout with optimistic concurrency control
     */
    put: {
      parameters: {
        query: {
          /** @description Club ID for ownership validation */
          club_id: number;
        };
        header: {
          /** @description Current version_token (UUID) of the resource */
          "If-Match": string;
        };
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["LayoutUpdate"];
        };
      };
      responses: {
        /** @description Layout updated */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Layout"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        409: components["responses"]["VersionConflictError"];
      };
    };
    /**
     * Delete a layout (hard delete)
     * @description Hard delete layout with CASCADE to zones/assets/templates
     */
    delete: {
      parameters: {
        query: {
          /** @description Club ID for ownership validation */
          club_id: number;
        };
        header: {
          /** @description Current version_token (UUID) of the resource */
          "If-Match": string;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Layout deleted successfully */
        204: {
          content: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        403: components["responses"]["ForbiddenError"];
        404: components["responses"]["NotFoundError"];
        409: components["responses"]["VersionConflictError"];
      };
    };
  };
  "/zones": {
    /**
     * List zones for a layout
     * @description Get paginated list of zones with optional filtering by layout_id and zone_type
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter zones by layout ID */
          layout_id?: number;
          /** @description Filter zones by type */
          zone_type?: "pitch" | "goal_area" | "penalty_area" | "training_zone" | "competition" | "parking" | "seating" | "entrance" | "exit" | "restroom" | "concession" | "vendor" | "medical" | "equipment" | "other";
          /** @description Base64-encoded cursor for pagination */
          cursor?: string;
          /** @description Number of records to return (max 100) */
          limit?: number;
        };
      };
      responses: {
        /** @description Paginated list of zones */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Zone"][];
              next_cursor?: string | null;
              has_more?: boolean;
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        500: components["responses"]["InternalServerError"];
      };
    };
    /**
     * Create a zone
     * @description Create a new zone within a layout
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ZoneCreate"];
        };
      };
      responses: {
        /** @description Zone created */
        201: {
          content: {
            "application/json": {
              data?: components["schemas"]["Zone"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        /** @description Layout not found */
        404: {
          content: {
            "application/json": {
              error?: {
                /** @example Layout not found */
                message?: string;
                /** @example LAYOUT_NOT_FOUND */
                code?: string;
              };
            };
          };
        };
      };
    };
  };
  "/zones/{id}": {
    /**
     * Get a single zone
     * @description Retrieve zone by ID
     */
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Zone details */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Zone"];
            };
          };
        };
        401: components["responses"]["UnauthorizedError"];
        404: components["responses"]["NotFoundError"];
      };
    };
    /**
     * Update a zone
     * @description Update zone with optimistic concurrency control
     */
    put: {
      parameters: {
        header: {
          /** @description Current version_token (UUID) of the resource */
          "If-Match": string;
        };
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ZoneUpdate"];
        };
      };
      responses: {
        /** @description Zone updated */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Zone"];
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        404: components["responses"]["NotFoundError"];
        409: components["responses"]["VersionConflictError"];
      };
    };
    /**
     * Delete a zone
     * @description Delete zone with optimistic concurrency control
     */
    delete: {
      parameters: {
        header: {
          /** @description Current version_token (UUID) of the resource */
          "If-Match": string;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Zone deleted successfully */
        204: {
          content: never;
        };
        400: components["responses"]["BadRequestError"];
        401: components["responses"]["UnauthorizedError"];
        404: components["responses"]["NotFoundError"];
        409: components["responses"]["VersionConflictError"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Template: {
      /** @example 1 */
      id?: number;
      /** @example rugby_standard */
      template_id?: string;
      /** @example Standard Rugby */
      name?: string;
      /**
       * @example {
       *   "sport": "rugby",
       *   "standard": true
       * }
       */
      meta?: Record<string, never>;
      /**
       * Format: date-time
       * @example 2025-10-16T10:00:00.000Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @example 2025-10-16T10:00:00.000Z
       */
      updated_at?: string;
    };
    Site: {
      /** @example 1 */
      id: number;
      /** @example 1 */
      club_id: number;
      /** @example Riverside Sports Complex */
      name: string;
      /**
       * @description GeoJSON Point (WGS84, SRID 4326)
       * @example {
       *   "type": "Point",
       *   "coordinates": [
       *     -6.2603,
       *     53.3498
       *   ]
       * }
       */
      location: {
        /** @enum {string} */
        type?: "Point";
        coordinates?: number[];
      };
      /**
       * @description GeoJSON Polygon (WGS84, SRID 4326)
       * @example {
       *   "type": "Polygon",
       *   "coordinates": [
       *     [
       *       [
       *         -6.261,
       *         53.349
       *       ],
       *       [
       *         -6.2596,
       *         53.349
       *       ],
       *       [
       *         -6.2596,
       *         53.3506
       *       ],
       *       [
       *         -6.261,
       *         53.3506
       *       ],
       *       [
       *         -6.261,
       *         53.349
       *       ]
       *     ]
       *   ]
       * }
       */
      boundary?: {
        /** @enum {string} */
        type?: "Polygon";
        coordinates?: number[][][];
      } | null;
      /** @example 123 River Road, Dublin 4, Ireland */
      address?: string | null;
      /**
       * Format: uuid
       * @example a1b2c3d4-e5f6-7890-abcd-ef1234567890
       */
      version_token: string;
      /**
       * Format: date-time
       * @description Soft delete timestamp
       */
      deleted_at?: string | null;
      /**
       * Format: date-time
       * @example 2025-10-20T10:00:00.000Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @example 2025-10-20T10:00:00.000Z
       */
      updated_at: string;
    };
    SiteCreate: {
      /** @example 1 */
      club_id: number;
      /** @example New Sports Complex */
      name: string;
      /**
       * @description GeoJSON Point (WGS84, SRID 4326)
       * @example {
       *   "type": "Point",
       *   "coordinates": [
       *     -6.2603,
       *     53.3498
       *   ]
       * }
       */
      location: {
        /** @enum {string} */
        type?: "Point";
        coordinates?: number[];
      };
      /** @description GeoJSON Polygon (WGS84, SRID 4326) */
      boundary?: Record<string, unknown> | null;
      address?: string | null;
    };
    /** @description All fields optional (partial update). Requires at least one field. */
    SiteUpdate: {
      name?: string;
      /** @description GeoJSON Point (WGS84, SRID 4326) */
      location?: Record<string, never>;
      /** @description GeoJSON Polygon (WGS84, SRID 4326) */
      boundary?: Record<string, unknown> | null;
      address?: string | null;
    };
    Layout: {
      /** @example 1 */
      id: number;
      /** @example 1 */
      site_id: number;
      /** @example Winter Training Layout */
      name: string;
      /** @example Main training configuration for winter season */
      description?: string | null;
      /**
       * @description Whether layout is publicly visible
       * @example false
       */
      is_published: boolean;
      /**
       * Format: uuid
       * @example b2c3d4e5-f6a7-8901-bcde-f12345678901
       */
      version_token: string;
      /**
       * Format: date-time
       * @example 2025-10-20T10:00:00.000Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @example 2025-10-20T10:00:00.000Z
       */
      updated_at: string;
    };
    LayoutCreate: {
      /** @example 1 */
      site_id: number;
      /** @example New Layout */
      name: string;
      description?: string | null;
      /** @example false */
      is_published?: boolean;
    };
    /** @description All fields optional (partial update). Requires at least one field. */
    LayoutUpdate: {
      name?: string;
      description?: string | null;
      is_published?: boolean;
    };
    Zone: {
      /** @example 1 */
      id: number;
      /** @example 1 */
      layout_id: number;
      /** @example Main Pitch */
      name: string;
      /**
       * @example pitch
       * @enum {string}
       */
      zone_type: "pitch" | "goal_area" | "penalty_area" | "training_zone" | "competition" | "parking" | "seating" | "entrance" | "exit" | "restroom" | "concession" | "vendor" | "medical" | "equipment" | "other";
      /**
       * @example grass
       * @enum {string|null}
       */
      surface?: "grass" | "turf" | "clay" | "concrete" | "asphalt" | "gravel" | "other" | null;
      /**
       * @description Hex color code for zone visualization
       * @example #22c55e
       */
      color?: string | null;
      /**
       * @description GeoJSON Polygon (WGS84) defining zone boundaries
       * @example {
       *   "type": "Polygon",
       *   "coordinates": [
       *     [
       *       [
       *         -122.4194,
       *         37.7749
       *       ],
       *       [
       *         -122.4184,
       *         37.7749
       *       ],
       *       [
       *         -122.4184,
       *         37.7739
       *       ],
       *       [
       *         -122.4194,
       *         37.7739
       *       ],
       *       [
       *         -122.4194,
       *         37.7749
       *       ]
       *     ]
       *   ]
       * }
       */
      boundary: Record<string, never>;
      /**
       * @description Calculated area in square meters
       * @example 7200.5
       */
      area_sqm?: number | null;
      /**
       * @description Calculated perimeter in meters
       * @example 360.2
       */
      perimeter_m?: number | null;
      /**
       * Format: uuid
       * @example a1b2c3d4-e5f6-7890-abcd-ef1234567890
       */
      version_token: string;
      /**
       * Format: date-time
       * @example 2025-10-20T10:00:00.000Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @example 2025-10-20T10:00:00.000Z
       */
      updated_at: string;
    };
    ZoneCreate: {
      /** @example 1 */
      layout_id: number;
      /** @example New Pitch */
      name: string;
      /**
       * @example pitch
       * @enum {string}
       */
      zone_type: "pitch" | "goal_area" | "penalty_area" | "training_zone" | "competition" | "parking" | "seating" | "entrance" | "exit" | "restroom" | "concession" | "vendor" | "medical" | "equipment" | "other";
      /**
       * @example grass
       * @enum {string|null}
       */
      surface?: "grass" | "turf" | "clay" | "concrete" | "asphalt" | "gravel" | "other" | null;
      /**
       * @description Hex color code (e.g.,
       * @example #22c55e
       */
      color?: string | null;
      /**
       * @description GeoJSON Polygon (WGS84). Must be valid: closed ring, 4+ points, WGS84 bounds
       * @example {
       *   "type": "Polygon",
       *   "coordinates": [
       *     [
       *       [
       *         -122.4194,
       *         37.7749
       *       ],
       *       [
       *         -122.4184,
       *         37.7749
       *       ],
       *       [
       *         -122.4184,
       *         37.7739
       *       ],
       *       [
       *         -122.4194,
       *         37.7739
       *       ],
       *       [
       *         -122.4194,
       *         37.7749
       *       ]
       *     ]
       *   ]
       * }
       */
      boundary: Record<string, never>;
    };
    /** @description All fields optional (partial update). Requires at least one field. */
    ZoneUpdate: {
      name?: string;
      /** @enum {string} */
      zone_type?: "pitch" | "goal_area" | "penalty_area" | "training_zone" | "competition" | "parking" | "seating" | "entrance" | "exit" | "restroom" | "concession" | "vendor" | "medical" | "equipment" | "other";
      /** @enum {string|null} */
      surface?: "grass" | "turf" | "clay" | "concrete" | "asphalt" | "gravel" | "other" | null;
      /** @description Hex color code */
      color?: string | null;
      /** @description GeoJSON Polygon (WGS84) */
      boundary?: Record<string, never>;
    };
    Venue: {
      /** @example 1 */
      id: number;
      /** @example 1 */
      club_id: number;
      /** @example Riverside Park */
      name: string;
      /** @example 123 River Road, Dublin 4, Ireland */
      address?: string;
      /**
       * @description GeoJSON Point (WGS84)
       * @example {
       *   "type": "Point",
       *   "coordinates": [
       *     -6.2603,
       *     53.3498
       *   ]
       * }
       */
      center_point?: Record<string, never>;
      /**
       * @description GeoJSON Polygon bounding box (WGS84)
       * @example {
       *   "type": "Polygon",
       *   "coordinates": [
       *     [
       *       [
       *         -6.261,
       *         53.349
       *       ],
       *       [
       *         -6.2596,
       *         53.349
       *       ],
       *       [
       *         -6.2596,
       *         53.3506
       *       ],
       *       [
       *         -6.261,
       *         53.3506
       *       ],
       *       [
       *         -6.261,
       *         53.349
       *       ]
       *     ]
       *   ]
       * }
       */
      bbox?: Record<string, never>;
      /** @example Europe/Dublin */
      tz?: string;
      /** @example true */
      published?: boolean;
      /** @example v001_river_001 */
      version_token?: string | null;
      /**
       * Format: date-time
       * @example 2025-10-16T10:00:00.000Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @example 2025-10-16T10:30:00.000Z
       */
      updated_at: string;
    };
    VenueCreate: {
      /** @example 1 */
      club_id: number;
      /** @example New Venue */
      name: string;
      /** @example 456 Oak Ave */
      address?: string;
      /** @description Optional GeoJSON Point */
      center_point?: Record<string, never>;
      /** @description Optional GeoJSON Polygon bounding box */
      bbox?: Record<string, never>;
      /** @example Europe/London */
      tz?: string;
      /** @example false */
      published?: boolean;
    };
    /** @description All fields optional (PATCH semantics) */
    VenueUpdate: {
      /** @example Updated Venue Name */
      name?: string;
      address?: string;
      center_point?: Record<string, never>;
      bbox?: Record<string, never>;
      tz?: string;
      published?: boolean;
    };
    Pitch: {
      /** @example 1 */
      id: number;
      /** @example 1 */
      venue_id: number;
      /** @example Pitch A */
      name: string;
      /** @example PA */
      code?: string;
      /** @example rugby */
      sport?: string;
      /** @example senior */
      level?: string;
      /**
       * @description GeoJSON Polygon (WGS84, SRID 4326)
       * @example {
       *   "type": "Polygon",
       *   "coordinates": [
       *     [
       *       [
       *         -6.2603,
       *         53.3498
       *       ],
       *       [
       *         -6.2602,
       *         53.3498
       *       ],
       *       [
       *         -6.2602,
       *         53.3499
       *       ],
       *       [
       *         -6.2603,
       *         53.3499
       *       ],
       *       [
       *         -6.2603,
       *         53.3498
       *       ]
       *     ]
       *   ]
       * }
       */
      geometry?: Record<string, never>;
      /** @example 0 */
      rotation_deg?: number;
      /** @example rugby_standard */
      template_id?: string | null;
      /**
       * @example draft
       * @enum {string}
       */
      status?: "draft" | "published";
      /** @example v001_pitch_a_001 */
      version_token?: string | null;
      /**
       * Format: date-time
       * @example 2025-10-16T10:00:00.000Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @example 2025-10-16T10:00:00.000Z
       */
      updated_at: string;
    };
    PitchCreate: {
      /** @example 1 */
      venue_id: number;
      /** @example New Pitch */
      name: string;
      /** @example NP */
      code?: string;
      /** @example football */
      sport?: string;
      /** @example senior */
      level?: string;
      /** @description GeoJSON Polygon (WGS84) */
      geometry?: Record<string, never>;
      rotation_deg?: number;
      template_id?: string | null;
      /**
       * @example draft
       * @enum {string}
       */
      status?: "draft" | "published";
    };
    /** @description All fields optional (PATCH semantics) */
    PitchUpdate: {
      name?: string;
      code?: string;
      sport?: string;
      level?: string;
      geometry?: Record<string, never>;
      rotation_deg?: number;
      template_id?: string | null;
      /** @enum {string} */
      status?: "draft" | "published";
    };
    Session: {
      /** @example 1 */
      id: number;
      /** @example 1 */
      team_id?: number | null;
      /** @example 1 */
      venue_id: number;
      /** @example 1 */
      pitch_id?: number | null;
      segment_id?: number | null;
      /**
       * Format: date-time
       * @example 2025-10-17T10:00:00.000Z
       */
      start_ts?: string | null;
      /**
       * Format: date-time
       * @example 2025-10-17T11:00:00.000Z
       */
      end_ts?: string | null;
      /** @example Team practice */
      notes?: string | null;
      /** @example share_abc123def456 */
      share_token?: string | null;
      /** @example v001_session_001 */
      version_token?: string | null;
      /**
       * Format: date-time
       * @example 2025-10-16T10:00:00.000Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @example 2025-10-16T10:00:00.000Z
       */
      updated_at: string;
    };
    SessionCreate: {
      team_id?: number | null;
      /** @example 1 */
      venue_id: number;
      pitch_id?: number | null;
      segment_id?: number | null;
      /** Format: date-time */
      start_ts?: string | null;
      /** Format: date-time */
      end_ts?: string | null;
      notes?: string | null;
      share_token?: string | null;
    };
    /** @description All fields optional (PATCH semantics) */
    SessionUpdate: {
      team_id?: number | null;
      pitch_id?: number | null;
      segment_id?: number | null;
      /** Format: date-time */
      start_ts?: string | null;
      /** Format: date-time */
      end_ts?: string | null;
      notes?: string | null;
      share_token?: string | null;
    };
  };
  responses: {
    /** @description Bad request - validation failed or missing required fields */
    BadRequestError: {
      content: {
        "application/json": {
          error?: {
            message?: string;
            /** @example VALIDATION_ERROR */
            code?: string;
          };
        };
      };
    };
    /** @description Missing or invalid Authorization header */
    UnauthorizedError: {
      content: {
        "application/json": {
          error?: {
            message?: string;
            /** @example MISSING_AUTH */
            code?: string;
          };
        };
      };
    };
    /** @description Resource not found */
    NotFoundError: {
      content: {
        "application/json": {
          error?: {
            message?: string;
            /** @example NOT_FOUND */
            code?: string;
          };
        };
      };
    };
    /** @description Forbidden - user does not have permission to access this resource */
    ForbiddenError: {
      content: {
        "application/json": {
          error?: {
            /** @example Access denied - ownership validation failed */
            message?: string;
            /** @example FORBIDDEN */
            code?: string;
          };
        };
      };
    };
    /** @description Version conflict - stale version_token (optimistic locking) */
    VersionConflictError: {
      content: {
        "application/json": {
          error?: {
            /** @example Resource version mismatch - stale version_token */
            message?: string;
            /** @example VERSION_CONFLICT */
            code?: string;
          };
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
