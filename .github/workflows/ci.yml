name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [created]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=12

    env:
      NODE_ENV: test
      DATABASE_URL_TEST: postgres://postgres:postgres@localhost:5432/plottr_test
      MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
      PGPASSWORD: postgres
      PGUSER: postgres
      PGHOST: localhost
      PGPORT: "5432"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run check:types

      - name: Create test DB and enable extensions
        run: |
          psql -v ON_ERROR_STOP=1 -h $PGHOST -U $PGUSER -d postgres -c "CREATE DATABASE plottr_test;"
          psql -v ON_ERROR_STOP=1 -h $PGHOST -U $PGUSER -d plottr_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"
          psql -v ON_ERROR_STOP=1 -h $PGHOST -U $PGUSER -d plottr_test -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;"

      - name: Run all tests
        run: npm test

      - name: Upload coverage (optional)
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  code-quality:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run check:types

      - name: Comment PR with status
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const checks = [
              { name: 'Type Check', status: '${{ job.status }}' }
            ];
            let comment = '## ✓ CI Quality Checks\n\n';
            checks.forEach(check => {
              const icon = check.status === 'success' ? '✅' : '❌';
              comment += `${icon} ${check.name}\n`;
            });
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # OpenAPI Spec Validation
  openapi-validation:
    name: Validate OpenAPI Spec
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install OpenAPI validator
        run: npm install -g @apidevtools/swagger-cli

      - name: Validate OpenAPI spec
        run: swagger-cli validate openapi/plottr.yaml

  # Frontend Type Checking & Build
  frontend-build:
    name: Frontend Build & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: TypeScript type checking
        working-directory: ./web
        run: npm run type-check

      - name: Build frontend
        working-directory: ./web
        run: npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: http://localhost:3001

  # Deploy API Docs to GitHub Pages (main branch only)
  deploy-api-docs:
    name: Deploy API Docs to GitHub Pages
    runs-on: ubuntu-latest
    needs: [test, openapi-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Create docs directory
        run: |
          mkdir -p _site
          cp public/api-docs.html _site/index.html
          cp openapi/plottr.yaml _site/openapi.yaml
          cp docs/API_REFERENCE.md _site/API_REFERENCE.md
          cp docs/USER_GUIDE_*.md _site/ 2>/dev/null || true
          echo "# Plottr API Documentation" > _site/README.md
          echo "" >> _site/README.md
          echo "Interactive API docs: [Open Swagger UI](./index.html)" >> _site/README.md
          echo "" >> _site/README.md
          echo "API Reference: [API_REFERENCE.md](./API_REFERENCE.md)" >> _site/README.md

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
